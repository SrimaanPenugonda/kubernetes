S63:
eksctl - eks cluster by amazon
kubectl - kubernetes cluster
kubectl – A command line tool for working with Kubernetes clusters.
eksctl – A command line tool for working with EKS clusters that automates many individual tasks.

Who is orchestrator :

WHY Kubernetes? Google product
1.Backed by CNCF
2. Cloud Native Product
2.Architecture
  Master Nodes - where kubernetes installed (Amazon EKS)
  Compute Nodes - where docker installed/container running
3.Kubernetes master components
    API Server - which interacts with all components
        users,UI,scheduler all will talk with API server only
    ETCD - it is a DB
    Scheduler-
9. What process runs on Kubernetes Master Node?
The Kube-api server process runs on the master node and serves to scale the deployment of more instances.
API Server: The API server acts as an entry point for all the REST commands used for controlling the cluster.
Etcd: etcd components, store configuration detail, and wright values. It communicates with the most component to receive commands and work. It also manages network rules and port forwarding activity.
Scheduler: The scheduler schedules the tasks to the slave node. It stores the resource usage information for every slave node. It is responsible for distributing the workload.
Kubelet: It gets the configuration of a Pod from the API server and ensures that the described containers are up and running.
Pods: A pod is a combination of single or multiple containers that logically run together on nodes.

kubectl cluster-info
kubectl get nodes
kubectl get nodes -o wide
kubectl api-versions
cat .kube/config
kubernetes uses authorization than authentication - with some key

POD - Kubernetes deals with POD -
 A pod is a combination of single or multiple containers that logically run together on nodes.
POD should have at least contain one container in it
containers in POD can share same storage
containers in POD will use same network stack

create pod:
kubectl run sample --image=nginx (imperative cmd)
we always prefer declarative method so yaml file
apiversion: v1
kind: pod
metadata:
  name: sample1
spec:  -- up ti this 4 will be common for all pods
  containers:
    - name: nginx
      image: nginx

now execute this ..kubectl apply -f 01-pod.yml
kubectl get pods
display both sample and sample1
metadata:
  name: sample2
spec:
  containers:
    - name: nginx
      image: nginx
    - name: centos
      image: centos:7
      command: ["sleep","20"]

sample2 pod will have 2 containers
pass the config to POD
    -using env variables
    env:
    - name: URL
      value: google.com
k9s: Kubernetes CLI To Manage Your Clusters In Style
ctrl+k will kill the pod
s- will into the pod
select the container
env- display all env variables
env file - configmaps
03-configmaps.yml
    careful about casesensitive.. apiVersion
    Pod should be like this
secret-
kind: Secret
data:
 URL: "" // give base64 format

-secretRef:
    name:


